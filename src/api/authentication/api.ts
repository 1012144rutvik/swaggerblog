/* tslint:disable */
/* eslint-disable */
/**
 * DocumentManagementSystem API\'S
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * 
     * @type {string}
     * @memberof BadRequest
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
    /**
     * 
     * @type {string}
     * @memberof Forbidden
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'emailOrUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'challenge'?: string;
}
/**
 * 
 * @export
 * @interface MaximumOtpAttempts
 */
export interface MaximumOtpAttempts {
    /**
     * 
     * @type {string}
     * @memberof MaximumOtpAttempts
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface OtpExpire
 */
export interface OtpExpire {
    /**
     * 
     * @type {string}
     * @memberof OtpExpire
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface RefreshToken200Response
 */
export interface RefreshToken200Response {
    /**
     * 
     * @type {string}
     * @memberof RefreshToken200Response
     */
    'access'?: string;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refresh'?: string;
}
/**
 * 
 * @export
 * @interface RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'mobileNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {number}
     * @memberof RegistrationRequest
     */
    'role'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'group'?: string;
}
/**
 * 
 * @export
 * @interface RegistrationResponse
 */
export interface RegistrationResponse {
    /**
     * 
     * @type {string}
     * @memberof RegistrationResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ResendOtpRequest
 */
export interface ResendOtpRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendOtpRequest
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface ResendOtpResponse
 */
export interface ResendOtpResponse {
    /**
     * 
     * @type {string}
     * @memberof ResendOtpResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResendOtpResponse
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface RoleData
 */
export interface RoleData {
    /**
     * 
     * @type {number}
     * @memberof RoleData
     */
    'count'?: number;
    /**
     * 
     * @type {Array<RoleDataResultsetInner>}
     * @memberof RoleData
     */
    'resultset'?: Array<RoleDataResultsetInner>;
}
/**
 * 
 * @export
 * @interface RoleDataResultsetInner
 */
export interface RoleDataResultsetInner {
    /**
     * 
     * @type {number}
     * @memberof RoleDataResultsetInner
     */
    'roleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoleDataResultsetInner
     */
    'roleName'?: string;
}
/**
 * 
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
    /**
     * Error message indicating the token issue
     * @type {string}
     * @memberof Unauthorized
     */
    'detail'?: string;
    /**
     * Error code indicating the nature of the issue
     * @type {string}
     * @memberof Unauthorized
     */
    'code'?: string;
    /**
     * Detailed information about the token validation error
     * @type {Array<UnauthorizedMessagesInner>}
     * @memberof Unauthorized
     */
    'messages'?: Array<UnauthorizedMessagesInner>;
}
/**
 * 
 * @export
 * @interface UnauthorizedMessagesInner
 */
export interface UnauthorizedMessagesInner {
    /**
     * Class of the token (e.g., AccessToken)
     * @type {string}
     * @memberof UnauthorizedMessagesInner
     */
    'token_class'?: string;
    /**
     * Type of the token (e.g., access)
     * @type {string}
     * @memberof UnauthorizedMessagesInner
     */
    'token_type'?: string;
    /**
     * Message describing the token issue
     * @type {string}
     * @memberof UnauthorizedMessagesInner
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface VerifyOtpRequest
 */
export interface VerifyOtpRequest {
    /**
     * 
     * @type {string}
     * @memberof VerifyOtpRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyOtpRequest
     */
    'otp'?: string;
}
/**
 * 
 * @export
 * @interface VerifyOtpResponse
 */
export interface VerifyOtpResponse {
    /**
     * 
     * @type {string}
     * @memberof VerifyOtpResponse
     */
    'refresh'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyOtpResponse
     */
    'access'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This accress is user login
         * @summary User Login access
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a new access token using a refresh token.
         * @summary Access token regenerate
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshTokenRequest: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refreshToken', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/client-api/v1/auth/token/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User Registration api
         * @summary User Registration
         * @param {RegistrationRequest} [registrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrations: async (registrationRequest?: RegistrationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-api/v1/auth/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * otp resend api
         * @summary resend otp
         * @param {ResendOtpRequest} resendOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendOtp: async (resendOtpRequest: ResendOtpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendOtpRequest' is not null or undefined
            assertParamExists('resendOtp', 'resendOtpRequest', resendOtpRequest)
            const localVarPath = `/client-api/v1/auth/resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendOtpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Role details api\'s
         * @summary Role details
         * @param {number} page Page number
         * @param {number} size Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleinformation: async (page: number, size: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('roleinformation', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('roleinformation', 'size', size)
            const localVarPath = `/client-api/v1/auth/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * email otp verification apis
         * @summary verification otp
         * @param {VerifyOtpRequest} verifyOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOtp: async (verifyOtpRequest: VerifyOtpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyOtpRequest' is not null or undefined
            assertParamExists('verifyOtp', 'verifyOtpRequest', verifyOtpRequest)
            const localVarPath = `/client-api/v1/auth/verify-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyOtpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * This accress is user login
         * @summary User Login access
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a new access token using a refresh token.
         * @summary Access token regenerate
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * User Registration api
         * @summary User Registration
         * @param {RegistrationRequest} [registrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrations(registrationRequest?: RegistrationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registrations(registrationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.registrations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * otp resend api
         * @summary resend otp
         * @param {ResendOtpRequest} resendOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendOtp(resendOtpRequest: ResendOtpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResendOtpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendOtp(resendOtpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.resendOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Role details api\'s
         * @summary Role details
         * @param {number} page Page number
         * @param {number} size Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleinformation(page: number, size: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roleinformation(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.roleinformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * email otp verification apis
         * @summary verification otp
         * @param {VerifyOtpRequest} verifyOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyOtp(verifyOtpRequest: VerifyOtpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyOtpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyOtp(verifyOtpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.verifyOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * This accress is user login
         * @summary User Login access
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a new access token using a refresh token.
         * @summary Access token regenerate
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefreshToken200Response> {
            return localVarFp.refreshToken(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * User Registration api
         * @summary User Registration
         * @param {RegistrationRequest} [registrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrations(registrationRequest?: RegistrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegistrationResponse> {
            return localVarFp.registrations(registrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * otp resend api
         * @summary resend otp
         * @param {ResendOtpRequest} resendOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendOtp(resendOtpRequest: ResendOtpRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResendOtpResponse> {
            return localVarFp.resendOtp(resendOtpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Role details api\'s
         * @summary Role details
         * @param {number} page Page number
         * @param {number} size Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleinformation(page: number, size: number, options?: RawAxiosRequestConfig): AxiosPromise<RoleData> {
            return localVarFp.roleinformation(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * email otp verification apis
         * @summary verification otp
         * @param {VerifyOtpRequest} verifyOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOtp(verifyOtpRequest: VerifyOtpRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerifyOtpResponse> {
            return localVarFp.verifyOtp(verifyOtpRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * This accress is user login
     * @summary User Login access
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a new access token using a refresh token.
     * @summary Access token regenerate
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refreshToken(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User Registration api
     * @summary User Registration
     * @param {RegistrationRequest} [registrationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registrations(registrationRequest?: RegistrationRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registrations(registrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * otp resend api
     * @summary resend otp
     * @param {ResendOtpRequest} resendOtpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public resendOtp(resendOtpRequest: ResendOtpRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).resendOtp(resendOtpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Role details api\'s
     * @summary Role details
     * @param {number} page Page number
     * @param {number} size Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public roleinformation(page: number, size: number, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).roleinformation(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * email otp verification apis
     * @summary verification otp
     * @param {VerifyOtpRequest} verifyOtpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyOtp(verifyOtpRequest: VerifyOtpRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyOtp(verifyOtpRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



